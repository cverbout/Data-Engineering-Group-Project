# -*- coding: utf-8 -*-
"""DataEngPart3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UlNcHoXzbCfbET0L5-WEp-GjfbGk1ky6

# Setup
"""

!pip install pandas psycopg2-binary geojson mapboxgl

import folium
import pandas as pd
import psycopg2
import branca.colormap as cm

from datetime import datetime, timedelta
from folium import plugins
from folium.plugins import HeatMap
from branca.element import Template, MacroElement


db_params = {
    "dbname": "project-DB",
    "user": "chase",
    "password": "******", ## CHANGE TO PASSWORD
    "host": "34.145.104.158",
    "port": "5432"
}

"""# Visualization 1"""

# DATABASE QUERYING

conn = psycopg2.connect(**db_params)

bounding_box = ((45.506022, -122.711662), (45.516636, -122.700316))

query_trips = f"""
SELECT DISTINCT trip_id
FROM breadcrumb
WHERE latitude BETWEEN {bounding_box[0][0]} AND {bounding_box[1][0]}
AND longitude BETWEEN {bounding_box[0][1]} AND {bounding_box[1][1]}
AND tstamp::time >= '07:00'
AND tstamp::time <= '17:00';
"""

df_trips = pd.read_sql(query_trips, conn)
selected_trip_id = df_trips['trip_id'].iloc[0]

query_breadcrumbs = f"""
SELECT bc.tstamp, bc.latitude, bc.longitude, bc.speed, t.route_id, t.vehicle_id
FROM breadcrumb bc
JOIN Trip t ON bc.trip_id = t.trip_id
WHERE bc.trip_id = {selected_trip_id};
"""

df_breadcrumbs = pd.read_sql(query_breadcrumbs, conn)

conn.close()

# MAP BUILDING

map_center = [(bounding_box[0][0] + bounding_box[1][0]) / 2, (bounding_box[0][1] + bounding_box[1][1]) / 2]
m = folium.Map(location=map_center, zoom_start=14, tiles='CartoDB Positron')
min_speed = df_breadcrumbs['speed'].min()
max_speed = df_breadcrumbs['speed'].max()
colormap = cm.linear.YlOrRd_09.scale(min_speed, max_speed)

for index, row in df_breadcrumbs.iterrows():
    folium.CircleMarker(
        location=(row['latitude'], row['longitude']),
        radius=5,
        popup=f"Speed: {row['speed']} m/s<br>Time: {row['tstamp']}<br>Route: {row['route_id']}<br>Vehicle: {row['vehicle_id']}",
        color=colormap(row['speed']),
        fill=True,
        fill_color=colormap(row['speed'])
    ).add_to(m)

colormap.caption = 'Speed (m/s)'
colormap.add_to(m)

m

"""# Visualization 2"""

# DATABASE QUERYING

conn = psycopg2.connect(**db_params)

query = """
SELECT bc.tstamp, bc.latitude, bc.longitude
FROM BreadCrumb bc
JOIN Trip t ON bc.trip_id = t.trip_id
WHERE t.route_id = 65
AND t.service_key = 'Weekday'
AND EXTRACT(DOW FROM bc.tstamp) = 5
AND bc.tstamp::time >= '16:00'
AND bc.tstamp::time <= '18:00';
"""

df = pd.read_sql_query(query, conn)
conn.close()

# MAP BUILDING

def get_color(time_value):
    time_of_day = time_value.time()
    if time_of_day >= datetime.strptime('16:00:00', '%H:%M:%S').time() and time_of_day < datetime.strptime('16:20:00', '%H:%M:%S').time():
        return 'red'
    elif time_of_day >= datetime.strptime('16:20:00', '%H:%M:%S').time() and time_of_day < datetime.strptime('16:40:00', '%H:%M:%S').time():
        return 'orange'
    elif time_of_day >= datetime.strptime('16:40:00', '%H:%M:%S').time() and time_of_day < datetime.strptime('17:00:00', '%H:%M:%S').time():
        return 'yellow'
    elif time_of_day >= datetime.strptime('17:00:00', '%H:%M:%S').time() and time_of_day < datetime.strptime('17:20:00', '%H:%M:%S').time():
        return 'green'
    elif time_of_day >= datetime.strptime('17:20:00', '%H:%M:%S').time() and time_of_day < datetime.strptime('17:40:00', '%H:%M:%S').time():
        return 'blue'
    else:
        return 'violet'

m = folium.Map(location=[45.5236, -122.6750], zoom_start=12.2, tiles='CartoDB dark_matter')

for index, row in df.iterrows():
    marker_color = get_color(row['tstamp'])
    popup = folium.Popup('Time: ' + str(row['tstamp']), parse_html=True)
    folium.CircleMarker(
        location=[row['latitude'], row['longitude']],
        radius=3,
        color=marker_color,
        fill=True,
        fill_color=marker_color,
        popup=popup
    ).add_to(m)


legend_html = '''
<div style="position: fixed;
     bottom: 500px; left: 50px; width: 150px; height: 150px;
     border:2px solid grey; z-index:9999; font-size:14px;
     background-color:white; opacity: 0.85;">
     &nbsp; <b>Time Intervals</b> <br>
     &nbsp; 16:00 - 16:20 &nbsp; <i class="fa fa-circle fa-1x" style="color:red"></i><br>
     &nbsp; 16:20 - 16:40 &nbsp; <i class="fa fa-circle fa-1x" style="color:orange"></i><br>
     &nbsp; 16:40 - 17:00 &nbsp; <i class="fa fa-circle fa-1x" style="color:yellow"></i><br>
     &nbsp; 17:00 - 17:20 &nbsp; <i class="fa fa-circle fa-1x" style="color:green"></i><br>
     &nbsp; 17:20 - 17:40 &nbsp; <i class="fa fa-circle fa-1x" style="color:blue"></i><br>
     &nbsp; 17:40 - 18:00 &nbsp; <i class="fa fa-circle fa-1x" style="color:violet"></i>
</div>
'''

m.get_root().html.add_child(folium.Element(legend_html))
m

"""# Visualization 3"""

# DATABASE QUERYING

conn = psycopg2.connect(**db_params)

query = """
SELECT bc.latitude, bc.longitude, bc.tstamp, t.vehicle_id
FROM BreadCrumb bc
JOIN Trip t ON bc.trip_id = t.trip_id
WHERE t.service_key = 'Sunday'
AND tstamp BETWEEN '2023-01-15 09:00:00' AND '2023-01-15 11:00:00'
AND bc.latitude BETWEEN 45.508610 AND 45.514933
AND bc.longitude BETWEEN -122.688736 AND -122.679402;
"""

df = pd.read_sql_query(query, conn)
conn.close()

# MAP BUILDING

vehicle_ids = df['vehicle_id'].unique()

folium_colors = ['red', 'blue', 'green', 'purple', 'orange', 'darkred',
                 'lightred', 'beige', 'darkblue', 'darkgreen', 'cadetblue',
                 'darkpurple', 'yellow', 'pink', 'lightblue', 'lightgreen',
                 'maroon', 'black', 'teal']

color_map = {vehicle_id: folium_colors[i % len(folium_colors)] for i, vehicle_id in enumerate(vehicle_ids)}

m = folium.Map(location=[df['latitude'].mean(), df['longitude'].mean()], zoom_start=16, tiles='CartoDB Positron')

for index, row in df.iterrows():
    vehicle_color = color_map[row['vehicle_id']]
    folium.CircleMarker(
        location=[row['latitude'], row['longitude']],
        radius=4,
        color=vehicle_color,
        fill=True,
        fill_color=vehicle_color,
        fill_opacity=0.7,
        popup=f"Timestamp: {row['tstamp']}<br>Vehicle ID: {row['vehicle_id']}"
    ).add_to(m)

legend_html = '''
<div style="
    position: fixed;
    bottom: 200px;
    left: 50px;
    width: 200px;
    height: 600px;
    border: 2px solid grey;
    z-index: 9999;
    font-size: 14px;
    background: white;
    padding: 10px;
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.3);">
    <strong>Vehicle Legend</strong><br>
    <hr style="margin: 5px 0;">
'''.format(20 * len(vehicle_ids) + 30)

for vehicle_id, color in color_map.items():
    legend_html += f'&nbsp; Vehicle ID {vehicle_id}: <i class="fa fa-circle fa-2x" style="color:{color};"></i><br>'
legend_html += '</div>'

m.get_root().html.add_child(folium.Element(legend_html))
m

"""# Visualization 4"""

# DATABASE QUERYING

conn = psycopg2.connect(**db_params)

query = """
WITH TripDurations AS (
    SELECT
        trip_id,
        MIN(tstamp) AS start_time,
        MAX(tstamp) AS end_time,
        MAX(tstamp) - MIN(tstamp) AS duration
    FROM BreadCrumb
    GROUP BY trip_id
)
SELECT
    t.trip_id,
    t.route_id,
    t.service_key,
    t.direction,
    t.vehicle_id,
    td.duration,
    td.start_time,
    td.end_time
FROM Trip t
JOIN TripDurations td ON t.trip_id = td.trip_id
ORDER BY td.duration DESC
LIMIT 1;
"""
trip_idx = 0
longest_trip = pd.read_sql(query, conn)
trip_id = longest_trip.iloc[trip_idx]['trip_id']

breadcrumb_query = f"""
SELECT latitude, longitude, tstamp
FROM BreadCrumb
WHERE trip_id = {trip_id}
ORDER BY tstamp;
"""

breadcrumbs = pd.read_sql(breadcrumb_query, conn)
conn.close()

# MAP BUILDING

longest_trip_info = longest_trip.iloc[trip_idx]
trip_id = longest_trip_info['trip_id']
route_id = longest_trip_info['route_id']
start_time = longest_trip_info['start_time']
end_time = longest_trip_info['end_time']
duration = longest_trip_info['duration']
vehicle_id = longest_trip_info['vehicle_id']

breadcrumbs['tstamp'] = pd.to_datetime(breadcrumbs['tstamp'])

map_center = [breadcrumbs['latitude'].mean(), breadcrumbs['longitude'].mean()]
m = folium.Map(location=map_center, zoom_start=13)

folium.PolyLine(
    locations=breadcrumbs[['latitude', 'longitude']].values,
    color='blue',
    weight=5,
    opacity=0.7
).add_to(m)


start_location = [breadcrumbs.iloc[0]['latitude'], breadcrumbs.iloc[0]['longitude']]
end_location = [breadcrumbs.iloc[-1]['latitude'], breadcrumbs.iloc[-1]['longitude']]

folium.Marker(
    location=start_location,
    popup=f"Start Time: {start_time}",
    icon=folium.Icon(color='green', icon='play')
).add_to(m)

folium.Marker(
    location=end_location,
    popup=f"End Time: {end_time}",
    icon=folium.Icon(color='red', icon='stop')
).add_to(m)


legend_html = f'''
<div style="
    position: fixed;
    bottom: 50px;
    left: 50px;
    width: 260px;
    height: auto;
    border: 2px solid grey;
    z-index: 9999;
    font-size: 14px;
    background: white;
    padding: 10px;
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.3);
    overflow: auto;">
    <strong>Trip Information</strong><br>
    <hr style="margin: 5px 0;">
    &nbsp; <b>Trip ID:</b> {trip_id}<br>
    &nbsp; <b>Route ID:</b> {route_id}<br>
    &nbsp; <b>Vehicle ID:</b> {vehicle_id}<br>
    &nbsp; <b>Duration:</b> {duration}<br>
    &nbsp; <b>Start Time:</b> {start_time}<br>
    &nbsp; <b>End Time:</b> {end_time}
</div>
'''

m.get_root().html.add_child(folium.Element(legend_html))
m

"""# Visualization 5a"""

conn = psycopg2.connect(**db_params)
query = """
WITH TripDurations AS (
    SELECT
        trip_id,
        MIN(tstamp) AS start_time,
        MAX(tstamp) AS end_time,
        MAX(tstamp) - MIN(tstamp) AS duration
    FROM BreadCrumb
    GROUP BY trip_id
)
SELECT
    t.trip_id,
    t.route_id,
    t.service_key,
    t.direction,
    td.duration,
    td.start_time,
    td.end_time
FROM Trip t
JOIN TripDurations td ON t.trip_id = td.trip_id
WHERE td.duration > '00:01:30'
ORDER BY td.duration ASC
LIMIT 1;
"""

longest_trip = pd.read_sql(query, conn)
trip_id = longest_trip.iloc[0]['trip_id']

breadcrumb_query = f"""
SELECT latitude, longitude, tstamp
FROM BreadCrumb
WHERE trip_id = {trip_id}
ORDER BY tstamp;
"""

breadcrumbs = pd.read_sql(breadcrumb_query, conn)
conn.close()

longest_trip_info = longest_trip.iloc[0]
trip_id = longest_trip_info['trip_id']
route_id = longest_trip_info['route_id']
start_time = longest_trip_info['start_time']
end_time = longest_trip_info['end_time']
duration = longest_trip_info['duration']

breadcrumbs['tstamp'] = pd.to_datetime(breadcrumbs['tstamp'])

map_center = [breadcrumbs['latitude'].mean(), breadcrumbs['longitude'].mean()]
m = folium.Map(location=map_center, zoom_start=15)

folium.PolyLine(
    locations=breadcrumbs[['latitude', 'longitude']].values,
    color='blue',
    weight=5,
    opacity=0.7
).add_to(m)

start_location = [breadcrumbs.iloc[0]['latitude'], breadcrumbs.iloc[0]['longitude']]
end_location = [breadcrumbs.iloc[-1]['latitude'], breadcrumbs.iloc[-1]['longitude']]

folium.Marker(
    location=start_location,
    popup=f"Start Time: {start_time}",
    icon=folium.Icon(color='green', icon='play')
).add_to(m)

folium.Marker(
    location=end_location,
    popup=f"End Time: {end_time}",
    icon=folium.Icon(color='red', icon='stop')
).add_to(m)

legend_html = f'''
<div style="
    position: fixed;
    bottom: 50px;
    left: 50px;
    width: 260px;
    height: auto;
    border: 2px solid grey;
    z-index: 9999;
    font-size: 14px;
    background: white;
    padding: 10px;
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.3);
    overflow: auto;">
    <strong>Trip Information</strong><br>
    <hr style="margin: 5px 0;">
    &nbsp; <b>Trip ID:</b> {trip_id}<br>
    &nbsp; <b>Route ID:</b> {route_id}<br>
    &nbsp; <b>Duration:</b> {duration}<br>
    &nbsp; <b>Start Time:</b> {start_time}<br>
    &nbsp; <b>End Time:</b> {end_time}
</div>
'''

m.get_root().html.add_child(folium.Element(legend_html))

m

"""# Visualization 5b"""

# DATABASE QUERYING

conn = psycopg2.connect(**db_params)

query = """
WITH TripDurations AS (
    SELECT
        trip_id,
        MIN(tstamp) AS start_time,
        MAX(tstamp) AS end_time,
        MAX(tstamp) - MIN(tstamp) AS duration
    FROM BreadCrumb
    GROUP BY trip_id
)
SELECT b.trip_id, AVG(b.speed) as avg_speed
FROM BreadCrumb b
JOIN TripDurations td ON b.trip_id = td.trip_id
WHERE td.duration > '10:00:00'  -- Ensure this condition is necessary
GROUP BY b.trip_id
ORDER BY avg_speed DESC
LIMIT 1;
"""

cursor = conn.cursor()
cursor.execute(query)
fastest_trip = cursor.fetchone()
trip_id = fastest_trip[0]

query_geo = f"""
SELECT latitude, longitude, speed, tstamp
FROM BreadCrumb
WHERE trip_id = {trip_id}
ORDER BY tstamp;
"""
geo_data = pd.read_sql_query(query_geo, conn)
conn.close()

# MAP BUILDING

average_speed = geo_data['speed'].mean()
def speed_color(speed):
    if speed < 20:
        return 'blue'
    elif 20 <= speed < 40:
        return 'green'
    elif 40 <= speed < 60:
        return 'yellow'
    elif 60 <= speed < 80:
        return 'orange'
    else:
        return 'red'

m = folium.Map(location=[geo_data['latitude'].mean(), geo_data['longitude'].mean()], zoom_start=11, tiles='CartoDB Positron')


for i in range(len(geo_data) - 1):
    folium.PolyLine(
        locations=[
            (geo_data.iloc[i]['latitude'], geo_data.iloc[i]['longitude']),
            (geo_data.iloc[i + 1]['latitude'], geo_data.iloc[i + 1]['longitude'])
        ],
        color=speed_color(geo_data.iloc[i]['speed']),
        weight=5,
        opacity=0.8
    ).add_to(m)

legend_html = f'''
<div style="
    position: fixed;
    bottom: 50px;
    left: 50px;
    width: 220px;
    height: auto;
    border: 2px solid grey;
    z-index: 9999;
    font-size: 14px;
    background: white;
    padding: 10px;
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.3);
    overflow: auto;">
    <strong>Speed Legend</strong><br>
    <hr style="margin: 5px 0;">
    &nbsp; <i class="fa fa-circle fa-1x" style="color:blue"></i>&nbsp; <b>Blue:</b> &lt; 20 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:green"></i>&nbsp; <b>Green:</b> 20-40 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:yellow"></i>&nbsp; <b>Yellow:</b> 40-60 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:orange"></i>&nbsp; <b>Orange:</b> 60-80 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:red"></i>&nbsp; <b>Red:</b> &gt; 80 m/s <br>
    <hr style="margin: 5px 0;">
    <b>Average Speed: {average_speed:.2f} m/s</b>
</div>
'''

m.get_root().html.add_child(folium.Element(legend_html))
m

"""# Visualization 5c"""

# DATABASE QUERYING

conn = psycopg2.connect(**db_params)

query = """
WITH TripDurations AS (
    SELECT
        trip_id,
        MIN(tstamp) AS start_time,
        MAX(tstamp) AS end_time,
        MAX(tstamp) - MIN(tstamp) AS duration
    FROM BreadCrumb
    GROUP BY trip_id
)
SELECT b.trip_id, AVG(b.speed) as avg_speed
FROM BreadCrumb b
JOIN TripDurations td ON b.trip_id = td.trip_id
WHERE td.duration > '10:00:00'  -- Ensure this condition is necessary
GROUP BY b.trip_id
ORDER BY avg_speed ASC
LIMIT 1;
"""

cursor = conn.cursor()
cursor.execute(query)
slowest_trip = cursor.fetchone()
print("Slowest trip ID:", slowest_trip[0], "with average speed:", slowest_trip[1], "m/s")

trip_id = slowest_trip[0]
query_geo = f"""
SELECT latitude, longitude, speed, tstamp
FROM BreadCrumb
WHERE trip_id = {trip_id}
ORDER BY tstamp;
"""

geo_data = pd.read_sql_query(query_geo, conn)
conn.close()

# MAP BUILDING

average_speed = geo_data['speed'].mean()
def speed_color(speed):
    if speed < 20:
        return 'blue'
    elif 20 <= speed < 40:
        return 'green'
    elif 40 <= speed < 60:
        return 'yellow'
    elif 60 <= speed < 80:
        return 'orange'
    else:
        return 'red'

m = folium.Map(location=[geo_data['latitude'].mean(), geo_data['longitude'].mean()], zoom_start=12, tiles='CartoDB Positron')

for i in range(len(geo_data) - 1):
    folium.PolyLine(
        locations=[
            (geo_data.iloc[i]['latitude'], geo_data.iloc[i]['longitude']),
            (geo_data.iloc[i + 1]['latitude'], geo_data.iloc[i + 1]['longitude'])
        ],
        color=speed_color(geo_data.iloc[i]['speed']),
        weight=5,
        opacity=0.8
    ).add_to(m)

legend_html = f'''
<div style="
    position: fixed;
    bottom: 50px;
    left: 50px;
    width: 220px;
    height: auto;
    border: 2px solid grey;
    z-index: 9999;
    font-size: 14px;
    background: white;
    padding: 10px;
    box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.3);
    overflow: auto;">
    <strong>Speed Legend</strong><br>
    <hr style="margin: 5px 0;">
    &nbsp; <i class="fa fa-circle fa-1x" style="color:blue"></i>&nbsp; <b>Blue:</b> &lt; 20 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:green"></i>&nbsp; <b>Green:</b> 20-40 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:yellow"></i>&nbsp; <b>Yellow:</b> 40-60 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:orange"></i>&nbsp; <b>Orange:</b> 60-80 m/s <br>
    &nbsp; <i class="fa fa-circle fa-1x" style="color:red"></i>&nbsp; <b>Red:</b> &gt; 80 m/s <br>
    <hr style="margin: 5px 0;">
    <b>Average Speed: {average_speed:.2f} m/s</b>
</div>
'''

m.get_root().html.add_child(folium.Element(legend_html))
m